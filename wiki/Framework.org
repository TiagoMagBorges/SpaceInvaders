** Java Collections Framework
  No nosso projeto utilizamos o framework [[https://docs.oracle.com/javase/tutorial/collections/intro/index.html][Collections]], que contém um vasto acervo de interfaces e métodos que auxiliam o programador a representar e manipular collections, como Array, Map, List, Queue. No total, a =Collections= abrange 12 interfaces de collections diferentes, todas com suporte para a implementação e algoritmos capazes de manipulá-las. 

** Motivo da Escolha 
  Desde o início do projeto, no momento de idealização do mesmo, decidimos que a melhor maneira de lidarmos e manipularmos com as entidades =Buff= e =Enemies= seria armazená-los dentro de Arrays. Ao implementar de fato essa ideia dentro do código, logo percebe-se a importância dessa framework e o quanto ela auxilia na facilidade e agilidade na hora de trabalhar com esses tipos de dados. 

** Exemplos de Uso
  Dentro da classe =Level=, onde todos os diferentes componentes do projeto são reunidos e implementados de fato, as naves inimigas, os tiros e os buffs são organizados dentro de Arrays: 
#+BEGIN_EXAMPLE
    private ArrayList<Enemy> enemies;
    private ArrayList<Bullet> bullets;
    private ArrayList<Buff> buffs;
#+END_EXAMPLE
  Para auxiliar na manipulação do conteúdos dessas variáveis, é necessário que antes tenha sido importado o framework: 
#+BEGIN_EXAMPLE
    import java.util.ArrayList;
#+END_EXAMPLE
  Logo, quando surge a necessidade de adicionar ou remover algum item de alguma dessas Arrays, a framework =Collection= já proporciona ao programador que isso seja realizado com apenas uma linha de código. No exemplo abaixo, ainda dentro da classe =Level=, é adicionado ao ArrayList =enemies=  o número definido de naves inimigas para aquela fase específica, acrescentando a informação do posicionamento da nave na tela do jogo, para no fim conseguir formar a imagem retangular da frota inimiga no jogo.
#+BEGIN_EXAMPLE
    private void loadEnemies(int enemiesAmount) {
        enemies = new ArrayList<>();
        for(int i = 0; i < enemiesAmount; i++)
            enemies.add(new Enemy((50 + i % 20 * 75)/2, (50 + i / 20  * 75)/2));
    }
#+END_EXAMPLE

** Vantagens e Desvantagens
  As vantagens óbvias de se utilizar do framework =Java Collections= é a agilidade e a praticidade com que conjuntos de tipos específicos de dados podem ser trabalhados e manipulados, além de aumentar a reusabilidade do código utilizado em um projeto. 
  Em nossa experiência, não tivemos experiências negativas com o uso da Collections. Apesar de existir pontos negativos ao utilizar essa framework, dentro do nosso projeto só conseguimos usufruir de ferramentas que auxiliaram no desenvolvimento do nosso jogo. 
  